from textblob import TextBlob
import sys, tweepy
import matplotlib.pyplot as plt 
import numpy as np


#Twitter credentials for the app

def percentage(part, whole):
    return 100 * float(part)/float(whole)


consumerKey = 
consumerSecret = 
accessToken= 
accessTokenSecret = 


auth = tweepy.OAuthHandler(consumerKey, consumerSecret)
auth.set_access_token(accessToken, accessTokenSecret)
api = tweepy.API(auth)

searchTerm = input("Enter what you want to search (Keyword/Hashtag): ")
NoOfSearchTerms = int(input("Enter how many tweets you want to analyze: "))

tweets = tweepy.Cursor(api.search, q=searchTerm).items(NoOfSearchTerms)
positive = 0
negative = 0
neutral = 0
polarity = 0



for tweet in tweets:
    print(tweet.text)
    analysis = TextBlob(tweet.text)
    polarity += analysis.sentiment.polarity


    if (analysis.sentiment.polarity == 0):
        neutral += 1
    
    elif (analysis.sentiment.polarity < 0.00):
         negative += 1
        
    
    elif (analysis.sentiment.polarity > 0.00):
        positive += 1

         


positive = percentage(positive, NoOfSearchTerms)
negative = percentage(negative, NoOfSearchTerms)
netural = percentage(neutral, NoOfSearchTerms)

positive = format(positive, '.2f')
neutral = format(neutral, '.2f')
negative = format(negative, '.2f')


print('How many people are reacting on ' +searchTerm+' by analyzing ' + str(NoOfSearchTerms) + ' Tweets.')

if (polarity == 0):
    print("Neutral")
elif (polarity < 0):
    print("Negative")
elif (polarity > 0):
    print("Positive")


#PieChart
labels = ['Positive ['+str(positive)+'%]', 'Neutral [' + str(neutral) + '%]', 'Negative [' + str(negative) + '%]']
sizes = [positive, neutral, negative]
colors = ['red', 'Green', 'yellow']
patches, texts = plt.pie(sizes, colors=colors, startangle=90)
plt.legend(patches, labels, loc="best")
plt.title('How many people are reacting '+searchTerm+' by analyzing '+str(NoOfSearchTerms)+' Tweets.')
plt.axis('equal')
plt.tight_layout()
plt.show()


#BarChart
n_groups = 3

objects = ('Neutral','Negative','Positive')
x = np.arange(n_groups)

plt.bar(x, [neutral,negative,positive])
plt.xticks(x, objects)
plt.show()
